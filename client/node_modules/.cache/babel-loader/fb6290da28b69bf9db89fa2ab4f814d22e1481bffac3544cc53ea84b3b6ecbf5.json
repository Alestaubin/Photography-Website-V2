{"ast":null,"code":"var _jsxFileName = \"/Users/alexst-aubin/Desktop/code/Photography-Website-V2/client/src/components/ImageGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport Masonry from \"masonry-layout\";\nimport imagesLoaded from \"imagesloaded\";\nimport PropTypes from \"prop-types\";\nimport \"./ImageGrid.css\";\nimport ModalImage from \"react-modal-image\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst screenWidth = window.innerWidth;\n/* get screen width */\nlet columnWidth;\nif (screenWidth < 700) {\n  columnWidth = parseInt(screenWidth);\n} else if (screenWidth < 1500) {\n  columnWidth = parseInt(screenWidth / 2);\n} else {\n  columnWidth = parseInt(screenWidth / 3);\n}\nfunction ImageGrid({\n  items,\n  coverImage,\n  albumTitle,\n  albumDate\n}) {\n  _s();\n  useEffect(() => {\n    load_images();\n  }, []);\n  async function load_images() {\n    const grid = document.querySelector(\".image-grid\");\n    const sizer = document.querySelector(\".image-grid-sizer\");\n    const msnry = new Masonry(grid, {\n      itemSelector: \".image-grid-item\",\n      columnWidth: \".image-grid-sizer\",\n      percentPosition: true\n    });\n    imagesLoaded(grid).on(\"progress\", function () {\n      msnry.layout();\n      console.log(msnry);\n    });\n    grid.addEventListener(\"mouseenter\", () => msnry.layout(), true);\n  }\n  function scrollToGrid() {\n    const gridElement = document.getElementById(\"image-grid\");\n    if (gridElement) {\n      gridElement.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"image_display\",\n    className: \"container-fluid text-center overflow-y-scroll mb-3\",\n    children: [coverImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cover-image-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: coverImage.src,\n        alt: coverImage.alt,\n        className: \"cover-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cover-overlay\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"album-title\",\n          children: albumTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"album-date\",\n          children: albumDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"see-album-btn\",\n          onClick: scrollToGrid,\n          children: \"View Album\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-grid overflow-y-scroll\",\n      id: \"image-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"image-grid-sizer\",\n        className: \"image-grid-sizer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), items.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image-grid-item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-container-with-description\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hover-box\",\n            children: [/*#__PURE__*/_jsxDEV(ModalImage, {\n              small: item.imgSrcLrg.replace(\"upload\", `upload/c_scale,w_${1.5 * columnWidth}`),\n              large: item.imgSrcLrg,\n              hideZoom: false,\n              hideDownload: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this), item.description && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image-description\",\n              children: item.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageGrid, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ImageGrid;\nImageGrid.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    imgSrcSmll: PropTypes.string.isRequired,\n    imgSrcLrg: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n    description: PropTypes.string\n  })).isRequired,\n  coverImage: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n  }),\n  albumTitle: PropTypes.string.isRequired\n};\nexport default ImageGrid;\nvar _c;\n$RefreshReg$(_c, \"ImageGrid\");","map":{"version":3,"names":["React","useEffect","Masonry","imagesLoaded","PropTypes","ModalImage","jsxDEV","_jsxDEV","screenWidth","window","innerWidth","columnWidth","parseInt","ImageGrid","items","coverImage","albumTitle","albumDate","_s","load_images","grid","document","querySelector","sizer","msnry","itemSelector","percentPosition","on","layout","console","log","addEventListener","scrollToGrid","gridElement","getElementById","scrollIntoView","behavior","id","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","item","index","small","imgSrcLrg","replace","large","hideZoom","hideDownload","description","_c","propTypes","arrayOf","shape","imgSrcSmll","string","isRequired","$RefreshReg$"],"sources":["/Users/alexst-aubin/Desktop/code/Photography-Website-V2/client/src/components/ImageGrid.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Masonry from \"masonry-layout\";\nimport imagesLoaded from \"imagesloaded\";\nimport PropTypes from \"prop-types\";\nimport \"./ImageGrid.css\";\nimport ModalImage from \"react-modal-image\";\n\nconst screenWidth = window.innerWidth;\n/* get screen width */\nlet columnWidth;\nif (screenWidth < 700) {\n  columnWidth = parseInt(screenWidth);\n} else if (screenWidth < 1500) {\n  columnWidth = parseInt(screenWidth / 2);\n} else {\n  columnWidth = parseInt(screenWidth / 3);\n}\n\nfunction ImageGrid({ items, coverImage, albumTitle, albumDate }) {\n  useEffect(() => {\n    load_images();\n  }, []);\n\n  async function load_images() {\n    const grid = document.querySelector(\".image-grid\");\n    const sizer = document.querySelector(\".image-grid-sizer\");\n\n    const msnry = new Masonry(grid, {\n      itemSelector: \".image-grid-item\",\n      columnWidth: \".image-grid-sizer\",\n      percentPosition: true,\n    });\n\n    imagesLoaded(grid).on(\"progress\", function () {\n      msnry.layout();\n      console.log(msnry);\n    });\n    grid.addEventListener(\"mouseenter\", () => msnry.layout(), true);\n  }\n\n  function scrollToGrid() {\n    const gridElement = document.getElementById(\"image-grid\");\n    if (gridElement) {\n      gridElement.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }\n\n  return (\n    <div id=\"image_display\" className=\"container-fluid text-center overflow-y-scroll mb-3\">\n      {/* Cover Image */}\n      {coverImage && (\n        <div className=\"cover-image-container\">\n          <img\n            src={coverImage.src}\n            alt={coverImage.alt}\n            className=\"cover-image\"\n          />\n          <div className=\"cover-overlay\">\n            <h1 className=\"album-title\">{albumTitle}</h1>\n            <p className=\"album-date\">{albumDate}</p>\n            <button className=\"see-album-btn\" onClick={scrollToGrid}>\n              View Album\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Image Grid */}\n      <div className=\"image-grid overflow-y-scroll\" id=\"image-grid\">\n        <div id=\"image-grid-sizer\" className=\"image-grid-sizer\"></div>\n        {items.map((item, index) => (\n          <div className=\"image-grid-item\" key={index}>\n            <div className=\"image-container-with-description\">\n              <div className=\"hover-box\">\n                <ModalImage\n                  small={item.imgSrcLrg.replace(\"upload\", `upload/c_scale,w_${1.5 * columnWidth}`)}\n                  large={item.imgSrcLrg}\n                  hideZoom={false}\n                  hideDownload={true}\n                />\n                {item.description && (\n                  <div className=\"image-description\">\n                    {item.description}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}      \n        </div>\n      </div>\n  );\n}\n\nImageGrid.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      imgSrcSmll: PropTypes.string.isRequired,\n      imgSrcLrg: PropTypes.string.isRequired,\n      alt: PropTypes.string.isRequired,\n      description: PropTypes.string,\n    })\n  ).isRequired,\n  coverImage: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n  }),\n  albumTitle: PropTypes.string.isRequired,\n};\n\nexport default ImageGrid;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,YAAY,MAAM,cAAc;AACvC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,iBAAiB;AACxB,OAAOC,UAAU,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,WAAW,GAAGC,MAAM,CAACC,UAAU;AACrC;AACA,IAAIC,WAAW;AACf,IAAIH,WAAW,GAAG,GAAG,EAAE;EACrBG,WAAW,GAAGC,QAAQ,CAACJ,WAAW,CAAC;AACrC,CAAC,MAAM,IAAIA,WAAW,GAAG,IAAI,EAAE;EAC7BG,WAAW,GAAGC,QAAQ,CAACJ,WAAW,GAAG,CAAC,CAAC;AACzC,CAAC,MAAM;EACLG,WAAW,GAAGC,QAAQ,CAACJ,WAAW,GAAG,CAAC,CAAC;AACzC;AAEA,SAASK,SAASA,CAAC;EAAEC,KAAK;EAAEC,UAAU;EAAEC,UAAU;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAC/DjB,SAAS,CAAC,MAAM;IACdkB,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,eAAeA,WAAWA,CAAA,EAAG;IAC3B,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC;IAClD,MAAMC,KAAK,GAAGF,QAAQ,CAACC,aAAa,CAAC,mBAAmB,CAAC;IAEzD,MAAME,KAAK,GAAG,IAAItB,OAAO,CAACkB,IAAI,EAAE;MAC9BK,YAAY,EAAE,kBAAkB;MAChCd,WAAW,EAAE,mBAAmB;MAChCe,eAAe,EAAE;IACnB,CAAC,CAAC;IAEFvB,YAAY,CAACiB,IAAI,CAAC,CAACO,EAAE,CAAC,UAAU,EAAE,YAAY;MAC5CH,KAAK,CAACI,MAAM,CAAC,CAAC;MACdC,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;IACpB,CAAC,CAAC;IACFJ,IAAI,CAACW,gBAAgB,CAAC,YAAY,EAAE,MAAMP,KAAK,CAACI,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC;EACjE;EAEA,SAASI,YAAYA,CAAA,EAAG;IACtB,MAAMC,WAAW,GAAGZ,QAAQ,CAACa,cAAc,CAAC,YAAY,CAAC;IACzD,IAAID,WAAW,EAAE;MACfA,WAAW,CAACE,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IACpD;EACF;EAEA,oBACE7B,OAAA;IAAK8B,EAAE,EAAC,eAAe;IAACC,SAAS,EAAC,oDAAoD;IAAAC,QAAA,GAEnFxB,UAAU,iBACTR,OAAA;MAAK+B,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACpChC,OAAA;QACEiC,GAAG,EAAEzB,UAAU,CAACyB,GAAI;QACpBC,GAAG,EAAE1B,UAAU,CAAC0B,GAAI;QACpBH,SAAS,EAAC;MAAa;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACFtC,OAAA;QAAK+B,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BhC,OAAA;UAAI+B,SAAS,EAAC,aAAa;UAAAC,QAAA,EAAEvB;QAAU;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC7CtC,OAAA;UAAG+B,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAEtB;QAAS;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzCtC,OAAA;UAAQ+B,SAAS,EAAC,eAAe;UAACQ,OAAO,EAAEd,YAAa;UAAAO,QAAA,EAAC;QAEzD;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAGDtC,OAAA;MAAK+B,SAAS,EAAC,8BAA8B;MAACD,EAAE,EAAC,YAAY;MAAAE,QAAA,gBAC3DhC,OAAA;QAAK8B,EAAE,EAAC,kBAAkB;QAACC,SAAS,EAAC;MAAkB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAC7D/B,KAAK,CAACiC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrB1C,OAAA;QAAK+B,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC9BhC,OAAA;UAAK+B,SAAS,EAAC,kCAAkC;UAAAC,QAAA,eAC/ChC,OAAA;YAAK+B,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBhC,OAAA,CAACF,UAAU;cACT6C,KAAK,EAAEF,IAAI,CAACG,SAAS,CAACC,OAAO,CAAC,QAAQ,EAAE,oBAAoB,GAAG,GAAGzC,WAAW,EAAE,CAAE;cACjF0C,KAAK,EAAEL,IAAI,CAACG,SAAU;cACtBG,QAAQ,EAAE,KAAM;cAChBC,YAAY,EAAE;YAAK;cAAAb,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpB,CAAC,EACDG,IAAI,CAACQ,WAAW,iBACfjD,OAAA;cAAK+B,SAAS,EAAC,mBAAmB;cAAAC,QAAA,EAC/BS,IAAI,CAACQ;YAAW;cAAAd,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACd,CACN;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC,GAf8BI,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAgBtC,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEZ;AAAC3B,EAAA,CA1EQL,SAAS;AAAA4C,EAAA,GAAT5C,SAAS;AA4ElBA,SAAS,CAAC6C,SAAS,GAAG;EACpB5C,KAAK,EAAEV,SAAS,CAACuD,OAAO,CACtBvD,SAAS,CAACwD,KAAK,CAAC;IACdC,UAAU,EAAEzD,SAAS,CAAC0D,MAAM,CAACC,UAAU;IACvCZ,SAAS,EAAE/C,SAAS,CAAC0D,MAAM,CAACC,UAAU;IACtCtB,GAAG,EAAErC,SAAS,CAAC0D,MAAM,CAACC,UAAU;IAChCP,WAAW,EAAEpD,SAAS,CAAC0D;EACzB,CAAC,CACH,CAAC,CAACC,UAAU;EACZhD,UAAU,EAAEX,SAAS,CAACwD,KAAK,CAAC;IAC1BpB,GAAG,EAAEpC,SAAS,CAAC0D,MAAM,CAACC,UAAU;IAChCtB,GAAG,EAAErC,SAAS,CAAC0D,MAAM,CAACC;EACxB,CAAC,CAAC;EACF/C,UAAU,EAAEZ,SAAS,CAAC0D,MAAM,CAACC;AAC/B,CAAC;AAED,eAAelD,SAAS;AAAC,IAAA4C,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}